---
# tasks file for my-web
- name: Ensure pip, keychain, git existence
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: true
    cache_valid_time: 3600
  with_items:
    - python3-pip
    - keychain
    - git
    - lsof
    - wget

- name: Create app group
  ansible.builtin.group:
    name: "{{ web_app_user }}"
    state: present
    gid: "{{ web_user_gid }}"

- name: Create app user
  ansible.builtin.user:
    name: "{{ web_app_user }}"
    shell: /bin/bash
    expires: -1
    state: present
    uid: "{{ web_user_uid }}"
    create_home: true

- name: Ensure .ssh folder exists
  become_user: "{{ web_app_user }}"
  ansible.builtin.file:
    path: "/home/{{ web_app_user }}/.ssh"
    state: directory
    mode: "0700"

- name: Copy ssh keys
  become_user: "{{ web_app_user }}"
  ansible.builtin.copy:
    src: ~/.ssh/id_rsa
    dest: "/home/{{ web_app_user }}/.ssh/id_rsa"
    mode: "0600"

- name: Download app
  become_user: "{{ web_app_user }}"
  ansible.builtin.git:
    accept_hostkey: true
    repo: git@github.com:1mbili/Ochrona-Danych.git
    key_file: /home/{{ web_app_user }}/.ssh/id_rsa
    dest: "{{ web_app_dir }}"
    force: true
    update: true
    version: 9457f99376eaf75da07ad634af0f91d1597985f8

- name: Install specified python requirements
  ansible.builtin.pip:
    requirements: "{{ web_app_dir }}/backend/requirements.txt"

- name: Create app group
  ansible.builtin.group:
    name: "{{ web_app_user }}"
    state: present
    gid: "{{ web_user_gid }}"

- name: Create app user
  ansible.builtin.user:
    name: "{{ web_app_user }}"
    shell: /bin/bash
    expires: -1
    state: present
    uid: "{{ web_user_uid }}"

- name: Add env variables
  become_user: "{{ web_app_user }}"
  ansible.builtin.lineinfile:
    path: ~/.bashrc
    line: "{{ item.line }}"
    state: present
  loop:
    - {
      variable: PythonPath,
      line: "export PYTHONPATH=$PYTHONPATH:'{{ web_app_dir }}/backend/app/'",
    }
    - {
      variable: AZURE_TENANT_ID,
      line: "export AZURE_TENANT_ID='{{ lookup('env', 'AZURE_TENANT_ID') | quote }}'",
    }
    - {
      variable: AZURE_CLIENT_ID,
      line: "export AZURE_CLIENT_ID='{{ lookup('env', 'AZURE_CLIENT_ID') | quote }}'",
    }
    - {
      variable: AZURE_CLIENT_SECRET,
      line: "export AZURE_CLIENT_SECRET='{{ lookup('env', 'AZURE_CLIENT_SECRET') | quote }}'",
    }
    - {
      variable: KEY_VAULT_NAME,
      line: "export KEY_VAULT_NAME='{{ lookup('env', 'KEY_VAULT_NAME') | quote }}'",
    }
  loop_control:
    label: "{{ item.variable }}"
  notify:
    - Reload bashrc

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Restart app
  block:
    - name: Find all process using port 8000
      ansible.builtin.command: "lsof -t -i:8000"
      register: processes_on_port

    - name: Stop all processes running on port 8000
      ansible.builtin.command: "kill -9 {{ item }}"
      with_items: "{{ processes_on_port.stdout_lines }}"
  ignore_errors: true
  tags:
    - start

- name: Start app
  become_user: "{{ web_app_user }}"
  ansible.builtin.shell:
    cmd: "cd {{ web_app_dir }}/backend/ && nohup python3 -m gunicorn --bind {{ ansible_ssh_host }}:8000 manage:app  </dev/null >/dev/null 2>&1 &"
  environment:
    PYTHONPATH: "{{ web_app_dir }}/backend/app/"
    AZURE_TENANT_ID: "{{ lookup('env', 'AZURE_TENANT_ID') }}"
    AZURE_CLIENT_ID: "{{ lookup('env', 'AZURE_CLIENT_ID') }}"
    AZURE_CLIENT_SECRET: "{{ lookup('env', 'AZURE_CLIENT_SECRET') }}"
    KEY_VAULT_NAME: "{{ lookup('env', 'KEY_VAULT_NAME') }}"
  tags:
    - start
